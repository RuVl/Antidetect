/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ScansRouteRouteImport } from './routes/scans/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ScansIndexRouteImport } from './routes/scans/index'
import { Route as ScansIdRouteRouteImport } from './routes/scans/$id/route'
import { Route as ScansIdIndexRouteImport } from './routes/scans/$id/index'

const ScansRouteRoute = ScansRouteRouteImport.update({
  id: '/scans',
  path: '/scans',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ScansIndexRoute = ScansIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ScansRouteRoute,
} as any)
const ScansIdRouteRoute = ScansIdRouteRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => ScansRouteRoute,
} as any)
const ScansIdIndexRoute = ScansIdIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ScansIdRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/scans': typeof ScansRouteRouteWithChildren
  '/scans/$id': typeof ScansIdRouteRouteWithChildren
  '/scans/': typeof ScansIndexRoute
  '/scans/$id/': typeof ScansIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/scans': typeof ScansIndexRoute
  '/scans/$id': typeof ScansIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/scans': typeof ScansRouteRouteWithChildren
  '/scans/$id': typeof ScansIdRouteRouteWithChildren
  '/scans/': typeof ScansIndexRoute
  '/scans/$id/': typeof ScansIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/scans' | '/scans/$id' | '/scans/' | '/scans/$id/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/scans' | '/scans/$id'
  id: '__root__' | '/' | '/scans' | '/scans/$id' | '/scans/' | '/scans/$id/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ScansRouteRoute: typeof ScansRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/scans': {
      id: '/scans'
      path: '/scans'
      fullPath: '/scans'
      preLoaderRoute: typeof ScansRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/scans/': {
      id: '/scans/'
      path: '/'
      fullPath: '/scans/'
      preLoaderRoute: typeof ScansIndexRouteImport
      parentRoute: typeof ScansRouteRoute
    }
    '/scans/$id': {
      id: '/scans/$id'
      path: '/$id'
      fullPath: '/scans/$id'
      preLoaderRoute: typeof ScansIdRouteRouteImport
      parentRoute: typeof ScansRouteRoute
    }
    '/scans/$id/': {
      id: '/scans/$id/'
      path: '/'
      fullPath: '/scans/$id/'
      preLoaderRoute: typeof ScansIdIndexRouteImport
      parentRoute: typeof ScansIdRouteRoute
    }
  }
}

interface ScansIdRouteRouteChildren {
  ScansIdIndexRoute: typeof ScansIdIndexRoute
}

const ScansIdRouteRouteChildren: ScansIdRouteRouteChildren = {
  ScansIdIndexRoute: ScansIdIndexRoute,
}

const ScansIdRouteRouteWithChildren = ScansIdRouteRoute._addFileChildren(
  ScansIdRouteRouteChildren,
)

interface ScansRouteRouteChildren {
  ScansIdRouteRoute: typeof ScansIdRouteRouteWithChildren
  ScansIndexRoute: typeof ScansIndexRoute
}

const ScansRouteRouteChildren: ScansRouteRouteChildren = {
  ScansIdRouteRoute: ScansIdRouteRouteWithChildren,
  ScansIndexRoute: ScansIndexRoute,
}

const ScansRouteRouteWithChildren = ScansRouteRoute._addFileChildren(
  ScansRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ScansRouteRoute: ScansRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
